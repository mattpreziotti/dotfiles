# ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
# ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#    ██║   ██╔████╔██║██║   ██║ ╚███╔╝
#    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗
#    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
# Terminal multiplexer
# https://github.com/tmux/tmux

# Change prefix
unbind C-b
set-option -g prefix C-space
bind-key C-space send-prefix

# Options
set -g base-index 1           # start indexing windows at 1 instead of 0
set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -g escape-time 0          # zero-out escape time delay
set -g history-limit 1000000  # significantly increase history size
set -g display-time 4000      # increase tmux messages display duration from 750ms to 4s
set -g mouse on               # enable mouse support
set -g renumber-windows on    # renumber all windows when any window is closed
set -g set-clipboard on       # use system clipboard
set -g status-position top    # macOS / darwin style
set -g focus-events on        # focus events enabled for terminals that support them
set -g status-interval 5      # for gitmux
set -g pane-active-border-style 'fg=magenta,bg=default'
set -g pane-border-style 'fg=brightblack,bg=default'

# vim-mode
setw -g mode-keys vi

# Undercurl
set -g default-terminal "tmux-256color"
set-option -sa terminal-features ',xterm-kitty:RGB'

# Source tmux.conf as suggested in `man tmux`
bind R source-file "~/.config/tmux/tmux.conf" \; display-message "reloaded config"

# Switch windows/sessions easier
bind -r h previous-window
bind -r l next-window
bind -r j switch-client -n
bind -r k switch-client -p
unbind n
bind -r n new 

# Keep cwd when adding new pane / window
bind c new-window -c '#{pane_current_path}'

# tmux sessionizer
bind-key -r p run-shell "~/.config/tmux/scripts/tmux_sessionizer.sh"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_left} = 0 ]]' { 
        select-pane -L; 
    } { 
        split-window -hb -c "#{pane_current_path}";
    }
}
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_bottom} = 0 ]]' { 
        select-pane -D; 
    } { 
        split-window -v -c "#{pane_current_path}";
    }
}
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_top} = 0 ]]' { 
        select-pane -U; 
    } { 
        split-window -vb -c "#{pane_current_path}";
    }
}
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_right} = 0 ]]' { 
        select-pane -R; 
    } { 
        split-window -h -c "#{pane_current_path}";
    }
}

bind-key -T copy-mode-vi 'C-h' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_left} = 0 ]]' { 
        select-pane -L; 
    } { 
        split-window -hb -c "#{pane_current_path}";
    }
}
bind-key -T copy-mode-vi 'C-j' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_bottom} = 0 ]]' { 
        select-pane -D; 
    } { 
        split-window -v -c "#{pane_current_path}";
    }
}
bind-key -T copy-mode-vi 'C-k' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_top} = 0 ]]' { 
        select-pane -U; 
    } { 
        split-window -vb -c "#{pane_current_path}";
    }
}
bind-key -T copy-mode-vi 'C-l' {
    if '[[ #{window_zoomed_flag} = 1 ]]' {
        resize-pane -Z;
    }
    if '[[ #{pane_at_right} = 0 ]]' { 
        select-pane -R; 
    } { 
        split-window -h -c "#{pane_current_path}";
    }
}

bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
bind-key s command-prompt -p "send pane to: "  "join-pane -h -t '%%'"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'omerxx/tmux-sessionx'

# catppuccin/tmux
set -g @plugin 'catppuccin/tmux'
set -g @catppuccin_window_status_style "rounded"
set -g @catppuccin_status_background "default"
set -g @catppuccin_status_right_separator "#[fg=#{@thm_surface_0}] "
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_window_text " #{pane_current_command}"
set -g @catppuccin_window_current_text " #{pane_current_command}"
set -g @catppuccin_directory_text " #{b:pane_current_path}"
set -g @catppuccin_gitmux_text ' #(gitmux -cfg $HOME/.gitmux.conf "#{pane_current_path}")'

# load catppuccin
run ~/.config/tmux/plugins/tmux/catppuccin.tmux

# Make the status line pretty and add some modules
set -g status-right-length 100
set -g status-left-length 100
set -g status-left "#{E:@catppuccin_status_session}"
set -g status-right "#{E:@catppuccin_status_directory}"
set -ag status-right "#{E:@catppuccin_status_date_time}"
set -agF status-right "#{E:@catppuccin_status_battery}"
set -agF status-right "#{E:@catppuccin_status_gitmux}"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run ~/.config/tmux/plugins/tpm/tpm
